//
// Copyright (c) 2016 Hiale
//
// Distributed under MIT License. (See https://opensource.org/licenses/MIT)
//
//
//
// Generated by Win32Forms 0.7.6009.42327

#include "ControlResizer.h"
#include <exception>

ControlResizer::ControlResizer(HWND hWnd)
{
	if (!IsWindow(hWnd))
		throw std::exception("Parameter hWnd not valid");
	window = std::make_shared<ControlResizerItem>();
	window->hWnd = hWnd;
	GetClientRect(hWnd, &window->oldRect);
}

void ControlResizer::addControl(HWND hwndCtl, const AnchorStyle& anchorStyle) const
{
	addControl(hwndCtl, nullptr, anchorStyle);
}

void ControlResizer::addControl(int ctlId, const AnchorStyle& anchorStyle) const
{
	addControl(GetDlgItem(window->hWnd, ctlId), anchorStyle);
}

void ControlResizer::addControl(HWND hwndCtl, HWND hwndParent, const AnchorStyle& anchorStyle) const
{
	std::shared_ptr<ControlResizerItem> parent;
	if (!hwndParent || hwndParent == window->hWnd)
		parent = window;
	else
		parent = findParent(window->controls, hwndParent);
	if (!parent)
		throw std::exception("Parent not found");
	RECT rect;
	GetWindowRect(hwndCtl, &rect);
	MapWindowPoints(HWND_DESKTOP, window->hWnd, (LPPOINT)&rect, 2);
	std::shared_ptr<ControlResizerItem> item = std::make_shared<ControlResizerItem>();
	item->hWnd = hwndCtl;
	item->anchorStyle = anchorStyle;
	item->newRect = rect;
	parent->controls[hwndCtl] = item;
}

void ControlResizer::addControl(int ctlId, int parentId, const AnchorStyle& anchorStyle) const
{
	addControl(GetDlgItem(window->hWnd, ctlId), GetDlgItem(window->hWnd, parentId), anchorStyle);
}

void ControlResizer::removeControl(HWND hwndCtl) const
{
	removeControl(window->controls, hwndCtl);
}

void ControlResizer::removeControl(int ctlId) const
{
	removeControl(GetDlgItem(window->hWnd, ctlId));
}

void ControlResizer::removeAll() const
{
	window->controls.clear();
}

void ControlResizer::onResize() const
{
	GetClientRect(window->hWnd, &window->newRect);
	onResize(window);
	window->oldRect = window->newRect;
	RedrawWindow(window->hWnd, nullptr, nullptr, RDW_INVALIDATE | RDW_UPDATENOW);
}

void ControlResizer::onResize(std::shared_ptr<ControlResizerItem> parent) const
{	
	long leftDiff = parent->newRect.left - parent->oldRect.left;
	long topDiff = parent->newRect.top - parent->oldRect.top;
	long rightDiff = parent->newRect.right - parent->oldRect.right;
	long bottomDiff = parent->newRect.bottom - parent->oldRect.bottom;

	for (auto& control : parent->controls)
	{
		std::shared_ptr<ControlResizerItem> item = control.second;
		item->oldRect = item->newRect;

		//horizontal		
		if ((item->anchorStyle & AnchorStyle::Left) == AnchorStyle::Left && (item->anchorStyle & AnchorStyle::Right) == AnchorStyle::Right)
		{
			//left and right is set --> change width
			item->newRect.left += leftDiff;
			item->newRect.right += rightDiff;
		}
		else if ((item->anchorStyle & AnchorStyle::Left) == AnchorStyle::Left)
		{
			//only left is set --> move control
			item->newRect.left += leftDiff;
			item->newRect.right += leftDiff;

		}
		else if ((item->anchorStyle & AnchorStyle::Right) == AnchorStyle::Right)
		{
			//only right is set --> move control
			item->newRect.left += rightDiff;
			item->newRect.right += rightDiff;
		}
		else
		{
			//neither left nor right is set --> move relatively
			long diff = ((item->newRect.right - item->newRect.left) / 2) - ((item->oldRect.right - item->oldRect.left) / 2);
			item->newRect.left += diff;
			item->newRect.right += diff;
		}
		//vertical
		if ((item->anchorStyle & AnchorStyle::Top) == AnchorStyle::Top && (item->anchorStyle & AnchorStyle::Bottom) == AnchorStyle::Bottom)
		{
			//top and bottom is set --> change height
			item->newRect.bottom += bottomDiff;
			item->newRect.top += topDiff;
		}
		else if ((item->anchorStyle & AnchorStyle::Top) == AnchorStyle::Top)
		{
			//only top is set --> move control
			item->newRect.top += topDiff;
			item->newRect.bottom += topDiff;
		}
		else if ((item->anchorStyle & AnchorStyle::Bottom) == AnchorStyle::Bottom)
		{
			//only bottom is set --> move control
			item->newRect.top += bottomDiff;
			item->newRect.bottom += bottomDiff;
		}
		else //none
		{
			//neither top nor bottm is set --> move relatively
			long diff = ((item->newRect.bottom - item->newRect.top) / 2) - ((item->oldRect.bottom - item->oldRect.top) / 2);
			item->newRect.top += diff;
			item->newRect.bottom += diff;
		}
		MoveWindow(item->hWnd, item->newRect.left, item->newRect.top, item->newRect.right - item->newRect.left, item->newRect.bottom - item->newRect.top, TRUE);		
		if (item->controls.size() > 0)
			onResize(item);
	}
}

void ControlResizer::removeControl(std::map<HWND, std::shared_ptr<ControlResizerItem>>& controls, HWND hwndCtrl) const
{
	controls.erase(hwndCtrl);
	for (auto& control : controls)
	{
		removeControl(control.second->controls, hwndCtrl);
	}
}

std::shared_ptr<ControlResizer::ControlResizerItem> ControlResizer::findParent(const std::map<HWND, std::shared_ptr<ControlResizerItem>>& controls, HWND hwndParent) const
{
	for (auto& control : controls)
	{
		if (control.first == hwndParent)
			return control.second;
		findParent(control.second->controls, hwndParent);
	}
	return nullptr;
}
