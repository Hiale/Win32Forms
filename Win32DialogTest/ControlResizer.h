//
// Copyright (c) 2016 Hiale
//
// Distributed under MIT License. (See https://opensource.org/licenses/MIT)
//
//
//
// Generated by Win32Forms 0.7.6009.42327

#pragma once

#include <map>
#include <memory>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>

enum class AnchorStyle : int
{
	None = 0,
	Top = 1,
	Bottom = 2,
	Left = 4,
	Right = 8
};

inline AnchorStyle operator |(AnchorStyle a, AnchorStyle b)
{
	return static_cast<AnchorStyle>(static_cast<int>(a) | static_cast<int>(b));
}

inline AnchorStyle operator &(AnchorStyle a, AnchorStyle b)
{
	return static_cast<AnchorStyle>(static_cast<int>(a) & static_cast<int>(b));
}

class ControlResizer
{
public:
	ControlResizer(HWND hWnd);
	void addControl(HWND hwndCtl, const AnchorStyle& anchorStyle) const;
	void addControl(int ctlId, const AnchorStyle& anchorStyle) const;
	void addControl(HWND hwndCtl, HWND htwndParent, const AnchorStyle& anchorStyle) const;
	void addControl(int ctlId, int parentId, const AnchorStyle& anchorStyle) const;
	void removeControl(HWND hwndCtl) const;
	void removeControl(int ctlId) const;
	void removeAll() const;
	void onResize() const;
private:
	struct ControlResizerItem
	{
		HWND hWnd;
		AnchorStyle anchorStyle;
		RECT oldRect;
		RECT newRect;
		std::map<HWND, std::shared_ptr<ControlResizerItem>> controls;
	};
	void onResize(std::shared_ptr<ControlResizerItem> parent) const;
	void removeControl(std::map<HWND, std::shared_ptr<ControlResizerItem>>& controls, HWND hwndCtrl) const;
	std::shared_ptr<ControlResizerItem> findParent(const std::map<HWND, std::shared_ptr<ControlResizerItem>>& controls, HWND hwndParent) const;
	std::shared_ptr<ControlResizerItem> window;
};

