using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;

namespace Hiale.Win32Forms
{
    public class ResizeCodeGenerator
    {
        public string OutputDir { get; }

        public ResizeCodeGenerator(string outputDir)
        {
            OutputDir = outputDir;
        }

        public void Generate(List<ControlData> controlData)
        {
            var assembly = Assembly.GetExecutingAssembly();
            SaveEmbedded(assembly, "ControlResizer.cpp");
            SaveEmbedded(assembly, "ControlResizer.h");
            CreateInstructions(controlData);
        }

        private void SaveEmbedded(Assembly assembly, string outputFile)
        {
            var outputPath = Path.Combine(OutputDir, outputFile);
            if (File.Exists(outputPath))
            {
                SimpleLogger.GetLogger().WriteLog($"Resize Code: File '{outputPath}' already exists. File will be skipped. Delete it manually if the file should be recreated.");
                return;
            }
            var resourceName = $"{GetType().Namespace}.Template.{outputFile}";
            string fileContent;
            using (var stream = assembly.GetManifestResourceStream(resourceName))
            using (var reader = new StreamReader(stream, Encoding.UTF8))
            {
                fileContent = reader.ReadToEnd();
            }
            fileContent = fileContent.Replace("// Generated by", "// Generated by Win32Forms " + Assembly.GetEntryAssembly().GetName().Version);
            File.WriteAllText(outputPath, fileContent);
        }

        private void CreateInstructions(List<ControlData> controlData)
        {
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine();
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("Win32Forms - ControlResizer Instructions");
            stringBuilder.AppendLine("========================================");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("1.\tInclude ControlResizer.h in the dialog source file: #include 'ControlResizer'");
            stringBuilder.AppendLine("2.\tCreate ControlResizer variable: ControlResizer resizer;");
            stringBuilder.AppendLine("3.\tExecute this code when the dialog is initialized (for example in the WM_INITDIALOG message handler, make sure the parameter hDlg points to the dialog handle):");
            stringBuilder.AppendLine("\tresizer.init(hDlg);");
            foreach (var anchorStyle in controlData.Select(ProcessControlData).Where(anchorStyle => !string.IsNullOrEmpty(anchorStyle)))
            {
                stringBuilder.AppendLine("\t" + anchorStyle);
            }
            stringBuilder.AppendLine("4.\tExecute this code when the dialog is resized (probably WM_SIZE):");
            stringBuilder.AppendLine("\tresizer.onResize();");
            stringBuilder.AppendLine("\treturn (INT_PTR)TRUE");
            stringBuilder.AppendLine("5.\tDone!");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("See the Win32DialogTest project for a working sample.");

            SimpleLogger.GetLogger().WriteLog(stringBuilder.ToString());
        }

        private static string ProcessControlData(ControlData controlData)
        {
            const AnchorStyles defaultAnchor = AnchorStyles.Top | AnchorStyles.Left;
            if (controlData.Anchor == defaultAnchor)
                return null; //default
            var anchors = new HashSet<string>();
            if (controlData.Anchor == AnchorStyles.None)
                anchors.Add("AnchorStyle::None");
            else
            {
                foreach (Enum value in Enum.GetValues(controlData.Anchor.GetType()))
                {
                    if (controlData.Anchor.HasFlag(value) && Convert.ToInt64(value) != 0)
                        anchors.Add("AnchorStyle::" + value);
                }
            }
            return $"resizer.addControl({controlData.ControlId}, {string.Join(" | ", anchors)});";
        }
    }
}
